project('qepy',
  ['c', 'fortran'],
  version : '7.2.0rc0',
  meson_version: '>= 1.1.0',
  default_options : [
    'warning_level=1',
    'buildtype=release'
    ])


add_languages('fortran', native: false)
ff = meson.get_compiler('fortran')
if ff.has_argument('-Wno-conversion')
  add_project_arguments('-Wno-conversion', language: 'fortran')
endif
add_project_arguments('-fPIC', language: 'fortran')
cc = meson.get_compiler('c')
##
##--> from scipy meson.build
if host_machine.system() == 'darwin' and cc.has_link_argument('-Wl,-ld_classic')
  # New linker introduced in macOS 14 not working yet, see gh-19357 and gh-19387
  add_project_link_arguments('-Wl,-ld_classic', language : ['c', 'cpp', 'fortran'])
endif

# Intel compilers default to fast-math, so disable it if we detect Intel
# compilers. A word of warning: this may not work with the conda-forge
# compilers, because those have the annoying habit of including lots of flags
# that are gcc-specific in CFLAGS/CXXFLAGS/FFLAGS, which throws off the
# detection logic below. You have to remove the wrong flags (only `-isystem`
# is actually needed, everything else shouldn't be there).
_intel_cflags = []
_intel_fflags = []
if cc.get_id() in ['intel', 'intel-llvm']
  _intel_cflags += cc.get_supported_arguments('-fp-model=strict')
elif cc.get_id() in ['intel-cl', 'intel-llvm-cl']
  _intel_cflags += cc.get_supported_arguments('/fp:strict')
endif
if ff.get_id() in ['intel', 'intel-llvm']
  _intel_fflags = ff.get_supported_arguments('-fp-model=strict')
  minus0_arg = ['-assume', 'minus0']
  if ff.has_multi_arguments(minus0_arg)
    _intel_fflags += minus0_arg
  endif
elif ff.get_id() in ['intel-cl', 'intel-llvm-cl']
  # Intel Fortran on Windows does things differently, so deal with that
  # (also specify dynamic linking and the right name mangling)
  _intel_fflags = ff.get_supported_arguments(
    '/fp:strict', '/MD', '/names:lowercase', '/assume:underscore',
    '/assume:minus0'
  )
endif
add_project_arguments(_intel_cflags, language: ['c', 'cpp'])
add_project_arguments(_intel_fflags, language: 'fortran')
##<-- 

##--> update variables
pythonexec = ${pythonexec}
name = ${name}
qepy_link_str = ${qepy_link_str}
source_str = ${source_str}
vpath = ${vpath}
##<--
#
py = import('python').find_installation(pythonexec, pure: false)
py_dep = py.dependency()

incdir_numpy = run_command(py,
  ['-c', 'import os; os.chdir(".."); import numpy; print(numpy.get_include())'],
  check : true
).stdout().strip()

incdir_f2py = run_command(py,
    ['-c', 'import os; os.chdir(".."); import numpy.f2py; print(numpy.f2py.get_include())'],
    check : true
).stdout().strip()

fortranobject_c = incdir_f2py / 'fortranobject.c'
quadmath_dep = ff.find_library('quadmath', required: false)

source = files([name+'module.c', fortranobject_c])
source += files(run_command('sh', '-c', 'ls f90wrap_*.f90', check:true).stdout().strip().split('\n'))
link_args = []
qepy_incs_dirs = ['./', '../']

foreach a : qepy_link_str.split()
  link_args += a
endforeach

fs = import('fs')
foreach f : source_str.split()
  foreach path : vpath.split()
    if fs.is_file(path / f)
      source += path /f
    endif
  endforeach
endforeach

qepy_incs_np = include_directories(incdir_numpy, incdir_f2py, qepy_incs_dirs)

# additional_flags

build_target(name,
  source,
  include_directories: qepy_incs_np,
  dependencies : [py_dep, quadmath_dep],
  link_args : link_args,
  install : true,
  gnu_symbol_visibility : 'default',
  link_language : 'fortran',
  name_prefix : '',
  name_suffix : 'so',
  target_type : 'shared_library',
  )
